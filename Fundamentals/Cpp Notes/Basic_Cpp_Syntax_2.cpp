#include <iostream>


using namespace std;

//Fonksiyon metot başında using tanımı altında tanımlanmalı
// iç içe fonksiyon desteklenmiyor
int Calc(int Par1, int Par2) {
	return Par1 * Par2;
}
void Write() {
	cout << "using void word" << endl;
}



void funkwithoutstatic() {
	int valout = 0;
	valout++;
	cout << "use without static : " << valout << endl;
}
void funkwithstatic () {
	static int valith = 0;
	valith++;
	cout << "use with static : " << valith << endl;
}



int pointer1(int a) {
	//uzun işlemler yapılırken her seferinde i değişkeninin bellekteki adresine başvuulacak
	//fonksiyon sonunda da return yapılacak ve main fonksiyonda da kullanılabilmesi için
	//main fonksiyonda da farklı bir deişkene atanması gerekecek
	a = 50;
	return a;
}

void pointer2(int *a) {
	//alt fonksiyonlara gönderilirken doğrudan değişkenin bellek adresi üzerinden işlem yapılıyor
	//bu sayede return kullanmaya da gerek kalmıyor çünkü alt fonksiyondan değişkenin bellek adresine ulaşılarak  
	//değişiklikler yapılıyor. Bu sayede main fonksiyona geçildiğinde de değişkenin alt fonksiyonda değiştirilen değeri 
	//için fazladan işlem yapmaya gerek kalmadan kllanılabiliyor
	*a = 34;
}



void amperVal1 (int lo) {
	lo = lo * 2;
}

void amperVal2 (int &lo) {
	lo = lo * 2;
}



int main () {

	int l;
	cout << "1-4 arasi bir sayi giriniz" << endl;
	cin >> l;

	switch (l) {
		case 1:
		cout << "seçilen sayi 1" << endl;
		break;
		case 2:
		cout << "seçilen sayi 2" << endl;
		break;
		case 3:
		cout << "seçilen sayi 3" << endl;
		break;
		case 4:
		cout << "seçilen sayi 4" << endl;
		break;
		default:
			cout << "Lütfen 1-4 arasi bir deger giriniz";
	}
	

	cout << endl << "--------------------------------" << endl;


	// 2 satır, 3 sütun
	int arr[2][3] = {{15, 30,45},
					{60, 75, 90}};

	for (int h = 0 ; h < 2 ; h++) {
		for (int g = 0 ; g < 3 ; g++) {
			cout << arr[h][g] << " ";
		}	
		cout << endl;
	}


	cout << endl << "--------------------------------" << endl;


	int result = 0;
	result = Calc(4,5);
	cout << "result : " << result;
	cout << endl;
	Write();


	cout << endl << "--------------------------------" << endl;

	
	// değişkenlerin değerlerini sabitlemek için kullanılıyor - Java'da "final" kelimesiiyle taımlanıyordu
	const int c = 5;
	

	cout << endl << "--------------------------------" << endl;


	//static, değişkenlerin tanımlandığı kapsamda program boyunca değerini kaybetmemesini sağlıyor. 
	//Bu süreç fonksiyon içinde de fonksiyon dışında da gereçkli oluyor.
	funkwithstatic();
	funkwithstatic();
	funkwithstatic();
	
	cout << endl;
	funkwithoutstatic();
	funkwithoutstatic();
	funkwithoutstatic();

	cout << endl;
	funkwithstatic();
	funkwithstatic();


	cout << endl << "--------------------------------" << endl;


	// pointerlar değişkenlerin bellekteki adresini tutmak için kullanılıyor
	//tanımı : * sembolü kullanılarak yapılıyor. 
	//atama işlemi değişkenin başına "&" sembolü getirilerek gerçekleştiriliyor.

	int i = 7;          // bir i değişkeni tanımlandı
	int *ptr;
	ptr= &i;      //i değişkeninin bellekteki adresi ptr pointer'ına değer olarak atandı
	cout << "i degiskeninin adresi : ptr   : " << ptr << endl;
	cout << "i degiskeninin adresi : &i    : " << &i << endl;
	cout << "i degiskeninin içeriği : *ptr : " << *ptr << endl;


	cout << endl << "--------------------------------" << endl;


	cout << "i'nin değeri ; " << i << endl;
	int k=pointer1(i);
	cout << "i'nin değişken üzerinden atanan yeni değeri ; " << k << endl;
	int* ptr2;
	int z = 50;
	cout << "z 'nin değeri ; " << z << endl;
	ptr2 = &z;
	//fonksiyonlara değişken yerine bellek adresini göndererek daha az işlemle istenilen işlerin gerçekleştirilmesi sağlanıyor
	pointer2(ptr2);
	cout << "z 'nin bellek adresi üzerinden yeni değeri ; " << z << endl;


	cout << endl << "--------------------------------" << endl;


	//Diziler de pointerlar gibi çalışıyor. dizideki her eleman bellekte bir sonraki elemanın adresini tutuyor. 
	//Pointerlar kullanılarka bu elemanlar üzerinde gezilebiliyor.
	int array [] = {11, 22, 33, 44, 55};
	int *ptr3;
	ptr3 = array;

	cout << "array adresi : " << array << endl;
	cout << "Pointer (ptr3) değişkenine atanan değer : " << ptr3 << endl;
	cout << "array üzerinden dizi elemanına ulaşma (array[1]) : " << array[1] << endl;
	cout << "Pointer üzerinden dizi elemanına ulaşma (*(ptr3+1)) : " << *(ptr3 + 1) << endl;
	cout << "Pointer üzerinden dizi elemanına ulaşma (*(ptr3+2)) : " << *(ptr3 + 2) << endl;


	cout << endl << "--------------------------------" << endl;


	// alt fonksiyonlara değişkenleri parametre olarak gönderdikten sonra fonksiyon tanımında "&" kullanılarak
	//parametre tanımı yapıldığında, alt fonksiyon içerisinde parametre ile ilgili gerçekleştirilen işlemler parametrenin bellek
	//adresine işleniyor. Bu nedenle yine return kullanmaya gerek kalmadan alt fonksiyonda değişkene/parametreye atanan değer main fonksiyonda da 
	//geçerliliğini sürdürmeye devam ediyor.
	int lo = 10;
	cout << "lo değişkeninin başlangıç değeri : " << lo << endl;
	amperVal1(lo);
	cout << "parametreyi ampersant kullanmadan alındığında işlem sonucu" << lo << endl;
	amperVal2(lo);
	cout << "parametreyi ampersant kullanılarak alındığında işlem sonucu" << lo << endl;

	return 0;
}


