#include <iostream>
#include "Basic_Cpp_Syntax_5_Car.h"
using namespace std;




int main() {

	Car car1("Red", 2022, "Mercedes", 175000, 4);
	car1.setBrand("Hyundai");
	car1.setPrice(150000);
	car1.ShowCarPref();
	cout << "Marka : " << car1.getBrand() << " Fiyat : " << car1.getPrice() << endl;


	cout << endl << "--------------------------------" << endl;


	//Nesneler üzerinde pointerlarla işlemler yapılırken nesnelerin bellek adreslerindeki değerlere erişebilmek için
	//"->" sembolü kullanılıyor. 
	Car car2("Green", 2020, "Opel", 80000, 4);
	Car *carptr;
	carptr = &car2;
	//oluşturulan bir nesnenn özelliğine ulaşmak için de aynı şeklide "->" sembolü kullanılıyor.
	//sonrasında atama işlemiyle özellik set edilebiliyor.
	cout << "car1 rengi :" << carptr->Color << endl;
	cout << "car1 bellek adresi : " << carptr << endl ;
	carptr->Color = "Blue";
	carptr->ShowCarPref();
	cout << "car1 markası :" << carptr->getBrand() << endl;


	cout << endl << "--------------------------------" << endl;


	//doğrudan pointerlar kullanılarak da nesneler oluşturulabiliyor. 
	//Bu satede doğrudna bellek alanından işlemler gerçekleştirilebiliyor
	Car* car3ptr = new Car("Yellow", 2012, "BMW", 105000, 5);
	car3ptr->ShowCarPref();
	delete car3ptr;


	cout << endl << "--------------------------------" << endl;


	//Desctructors, bellekte ayrılan alanları geri bırakmak veya bir class'a özgü  diğer temizleme işlemlerini yapmak için kulanılıyor
	// 
	// Normal nesne tanımlarında ayrılan bellek alanları için program sonunda Desctructors tanımları (varsayılanda geliyor) otomatik olarak çağrılırken,
	// Poniterlar kullanılarak yapılan nesne tanımlarında Desctructors tanımı "delete" komutu kullanılarak manuel olarak çağrılması gerekiyor (otomatik çağrılmıyor).
	// 
	//Desctructors tanımı yapılırken parametre verilmez. Daha çok kullanılacağı metoda/kapsama/fonksiyona yakın tanımlanması tavsiye ediliyor (Constructur altına tanımı yapıldı).
	//
	//Desctructors, bir foknsiyon/metod/kapsamın sonlanmadan/dışına çıkılmadan hemen önce çağrılıyor
	//fonksiyon/metod/kapsam içerisinde kullanılan bellek alanları geri bırakılsın. Class içinde tanımlanan pointer değişkenleri kaldırmak için kullanılıyor
	//
	//Varsayılanda her metod/fonksiyon/kapsam için Desctructors tanımı geliyor ("delete " komutuyla çağrılıyor). İsteğe bağlı olaark metot tanımında metod isminin
	//başına "~" sembolü koyularak o metod için Desctructors tanımı yapılarak constumize edilebiliyor.

	Car* car4ptr = new Car("Green", 1912, "Swift", 1005000, 5);
	car4ptr->ShowCarPref();
	//Desctructors  metodu çağrılarak bellekte ayrılan alanlar deallocate ediliyor. 
	//Pointer kkullanımı sonrası "delete" komutu mutlaka kullanılmalı.
	delete car4ptr;


	cout << endl << "--------------------------------" << endl;


	//class içerisinde nesneler için normal değişken tanıumı yapıldığı gibi pointerlar kullanılarak da değişken tanımları yapılabiliyor.
	Car* car5ptr = new Car("Gray", 1992, "Lada", 1005000, 8);

	//classiçerisinde pointer ile oluşturulan değişkenlere *(<PointerName>) ile ulaşılıyor (Pointerlarla dizi işlemlerinde olduğu gibi). 
	cout << "car5 Kapı sayısı : " << *(car5ptr->DoorCount) << endl;
	cout << "car5 Kapı sayısının bulunduğu adres : " << (car5ptr->DoorCount) << endl;
	// normal nesne tanımı apıldığında bu şekilde rişiliyor
	//cout << "car5 Kapı sayısının bulunduğu adres : " << (car5ptr.DoorCount) << endl; 
	delete car5ptr;


	cout << endl << "--------------------------------" << endl;


	return 0;
}


