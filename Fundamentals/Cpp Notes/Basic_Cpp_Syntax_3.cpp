#include <iostream>


using namespace std;


void search( string par1) {
	cout << "string par1 : " << par1 << endl;
}

void search(string par1, string par2) {
	cout << "string par1 : " << par1 << endl;
	cout << "string par2 : " << par2 << endl;
}

void search(int par1) {
	cout << "int par1 : " << par1 << endl;
}





int main() {

	//Cmd ekranındaTürkçe karakter desteği için kullanılıyor
	setlocale(LC_ALL, "Turkish");


	cout << endl << "--------------------------------" << endl;


	//Overloading, aynı isimdeki fonksiyonlara farklı parametreler verilerek, 
	//fonksiyon çağrılarında farklı parametreler verldiğinde farklı işlmelerin yapılması sağlanabiliyor
	search("key1");
	search(5);
	search("key1", "key2");


	cout << endl << "--------------------------------" << endl;


	//bir değişken üzerinde değer tutmak yerine doğrudan bellekte yer ayrılabiliyor.
	//buna dinamik bellek yönetimi deniliyor. doğrudan bellekte bir adres alanı rezerve ediliyor.
	//bir değer girişi yapılacağı zaman tanımlanan pointer üzerinden ayrılan bellek alanına değer kaydediliyor
	//kullanılacak veri boyutu belirli olmadığı zamanlarda kullanılıyor
	//bu sayede değişken tanımı yapmaya gerek kalmadan, doğrudan bellek alanında işlem yapılaibliyor.
	int* ptr = new int;
	*ptr = 7;
	cout << "Bellek adresi : " << ptr << endl;
	cout << "Atanan değer : " << *ptr << endl;

	//işlem sonunda bellek üzerinde ayrılan oluşturulan alan silinmeli.
	//aksi taktirde bellekte tanımlı alan kalmaya devam eder. Bu alan üzerine yeni değer yazılamaz.
	delete ptr;
	cout << "Bellekte ayrılan alan silindikten sonraki bellek adresi : " << ptr << endl;


	cout << endl << "--------------------------------" << endl;


	//Dinamik bellek yönetiminde Değişken tanımı yapılabildiği gibi dizi yapısında tanımmlama da yapılabiliyor.
	//runtime içerisinde değişken boyutlarda dizi tanımı yapılması gerektiğinde yine bir pointer tanımıyla
	//doğrudan bellekte oluşturulmak istenen dizi için (değişken boyutlarda) alan ayrılması sağlanabiliyor.
	//kullanım sonunda belelkte ayrıla alan silinmeli.
	int x;
	cin >> x;
	cout << "X değeri : " << x << endl;
	int* ptrarr = new int[x];

	for (int i = 0; i < x; i++) {
		cin >> ptrarr[i];
	}

	for (int j = 0; j < x; j++) {
		cout << "Bellek adresi : " << (ptrarr + j) << " Değeri : " << ptrarr[j] << endl;
	}

	//dizi yapısı oluşturulduğu için delete komutunun snunanda köşeli parantez kullanılıyor
	delete[] ptrarr;
	cout << "Delete komutu sonrası : " << ptrarr << endl;


	cout << endl << "--------------------------------" << endl;

	//             77  132
	int karr[] = { 11, 22, 33, 44, 55 };
	int* kptr;
	kptr = karr;

	karr[0] = karr[2] + karr[3];
	*(karr + 1) = *(karr) + *(karr + 4);

	for (int z = 0; z < 5; z++){
		cout << "Sonuc : " << karr[z] << endl;
	}


	return 0;
}


